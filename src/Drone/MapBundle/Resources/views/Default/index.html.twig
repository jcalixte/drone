{% extends 'DroneMapBundle::layout.html.twig' %}

{% block body_map %}
	<div class="map-container">
		<h1>Carte du monde pour {{ user.username|capitalize }}</h1>
		<hr>
		<input id="search_query" name="search_query" type="text" value="{{ user.address }} {{ user.zipcode }} {{ user.country }}">
		<input id="search" name="search" type="button" value="Rechercher">
		<a href="#" id="rectangleChoice" class="btn btn-default" role="button">Détourer votre terrain</a>
		<a href="#" id="interestPoint" title="Point de passage" class="btn btn-info">Point de passage</a>
		<input id="pinPath" type="button" class="btn btn-large btn-info" value="BOUGE !" /><br />
		<hr>
		<div id='map'></div>
	</div>
	<div class="submit-field">
		<input id='submitField' class='btn btn-info btn-large' type="submit" name="Valider vos terres" value="Valider vos terres">
	</div>
{% endblock %}

{% block javascripts_map %}
<script>
	$(function(){
		var credentialsKey = "AkTr7IeJt5O4ZpWh9reo8wMmlcWN8purxjzGkLalDqeMICooYnrBJepl9dD7cmMt";
		var mapOptions = {
			credentials: credentialsKey,
			center: new Microsoft.Maps.Location(48.85720336058152, 2.3527531137302393),
			mapTypeId: Microsoft.Maps.MapTypeId.automatic,
			zoom: 10
		};
		// Enregistrement des coins pour les terrains.
		var pinTable = [];

		var map = new Microsoft.Maps.Map(document.getElementById("map"), mapOptions);
		var currentAnimation;

		//Ajout de modules utilisés
		var handleClick = false;
		var search_engine_loaded = false;
		Microsoft.Maps.loadModule('Microsoft.Maps.Search', { callback: function(){
				search_engine_loaded = true;
			}
		});
		var advanced_shapes_loaded = false;
		Microsoft.Maps.loadModule('Microsoft.Maps.AdvancedShapes', { callback: function(){
				advanced_shapes_loaded = true;
			}
		});
		var animation_loaded = false;
		Microsoft.Maps.loadModule('AnimationModule', { callback: function(){
			animation_loaded = true;
		}});

		var shape = [];

		$("#search").click(function(){
			var query = $("#search_query").val();
			if(query != ""){
				searchModule(query);
			}
		});

		$("#rectangleChoice").click(function(e){
			e.preventDefault();
			$(this).toggleClass('active').trigger('fieldChoice');
			if($(this).hasClass('active')){
				$(this).text("Finir votre contour");
				$('.MicrosoftMap').css('cursor', 'crosshair');
			}else{
				$(this).text("Détourer votre terrain");
				$("#map").trigger("click");
				$('.MicrosoftMap').css('cursor', 'grab');
			}
			return false;
		});

		$("#interestPoint").click(function(e){
			e.preventDefault();
			$(this).toggleClass('active').trigger('pointChoice');
			if($(this).hasClass('active')){
				$(this).text("Finir");
				$('.MicrosoftMap').css('cursor', 'crosshair');
			}else{
				$(this).text("Point de passage");
				$('.MicrosoftMap').css('cursor', 'grab');
			}
		});

		$('.MicrosoftMap').mouseover(function(){
			var crosshair = $("#rectangleChoice").hasClass('active') || $("#interestPoint").hasClass('active');
			if(crosshair){
				$('.MicrosoftMap').css('cursor', 'crosshair');
			}else{
				$('.MicrosoftMap').css('cursor', 'grab');
			}
		});

		$('.MicrosoftMap').click(function(){
			var crosshair = $("#rectangleChoice").hasClass('active') || $("#interestPoint").hasClass('active');
			if(crosshair){
				$('.MicrosoftMap').css('cursor', 'crosshair');
			}else{
				$('.MicrosoftMap').css('cursor', 'grabbing');
			}
		});

		$("#pinPath").click(function() {
			movePushpin();
		});

		/*==========  Évènements  ==========*/

		$(document).on('fieldChoice', function(){
			if($("#rectangleChoice").hasClass('active')){
				handleClick = Microsoft.Maps.Events.addHandler(map, 'click', function(e){
					if(e.targetType == "map"){
						var point = new Microsoft.Maps.Point(e.getX(), e.getY());
						var loc = e.target.tryPixelToLocation(point);
						addPointToShape(loc.latitude, loc.longitude);
					}
				});
			}else{
				if(handleClick !== false){
					Microsoft.Maps.Events.removeHandler(handleClick);
					handleClick = false;
				}
				addShape();
			}
		});

		/*==========  Fonctions  ==========*/

		function searchModule(q)
		{
			if(search_engine_loaded){
				var searchManager = new Microsoft.Maps.Search.SearchManager(map);

				var searchRequest = {
					where: q, 
					count: 5, 
					callback: searchGeoCallback, 
					errorCallback: searchError
				};

				searchManager.geocode(searchRequest);
			}
		}

		function searchGeoCallback(geocodeResult, userData){
			map.setView({
				bounds: geocodeResult.results[0].bestView
			});
		}

		function searchError(searchRequest)
		{
			alert("An error occurred.");
		}

		function addPointToShape(lat, lon){
			shape[shape.length] = new Microsoft.Maps.Location(lat, lon);
			// Define the pushpin location
			var loc = new Microsoft.Maps.Location(lat, lon);

			// Add a pin to the map
			pinTable[pinTable.length] = new Microsoft.Maps.Pushpin(loc); 
			map.entities.push(pinTable[pinTable.length-1]);
		}

		function addShape(){
			if(shape.length > 0){
				// On ferme la forme avec le premier point.
				shape[shape.length] = shape[0];
				var polyShape = shape.slice();
				var polygon = new Microsoft.Maps.Polygon(polyShape);
				polygon.setOptions({
					fillColor: {
						a: 50,
						r: 0,
						g: 0,
						b: 0
					},
					strokeColor: {
						a: 200,
						r: 255,
						g: 255,
						b: 255
					},
					infobox: "field",
					visible: true,
				});
				// Suppression des points
				for (var i = 0; i < pinTable.length; i++) {
					map.entities.remove(pinTable[i]);
				};
				map.entities.push(polygon);
				// Remise à zéro du tableau de point.
				pinTable.length = 0;
				shape.length    = 0;
				Microsoft.Maps.Events.addHandler(polygon, 'click', addCircleEvent);
			}
		}

		function addCircle(radius, location){ //latitude, longitude){
			var backgroundColor = new Microsoft.Maps.Color(10, 100, 0, 0);
			var borderColor     = new Microsoft.Maps.Color(150, 200, 0, 0);
			//var R               = 6371; // Rayon de la terre en kilomètres
			var lat             = (location.latitude  * Math.PI) / 180;     
			var lon             = (location.longitude * Math.PI) / 180;
			var d               = parseFloat(radius);// / R;
			var circlePoints    = [];

			for (x = 0; x <= 360; x += 5) {
				var position = new Microsoft.Maps.Location(0, 0);
				xRadian = x * Math.PI / 180;
				position.latitude = Math.asin(Math.sin(lat) * Math.cos(d) + Math.cos(lat) * Math.sin(d) * Math.cos(xRadian));

				position.longitude = ((lon + Math.atan2(Math.sin(xRadian) * Math.sin(d) * Math.cos(lat),Math.cos(d) - Math.sin(lat) * Math.sin(position.latitude))) * 180) / Math.PI;
				position.latitude = (position.latitude * 180) / Math.PI;
				circlePoints.push(position);
			}

			var polygon = new Microsoft.Maps.Polygon(circlePoints.slice());

			polygon.setOptions({
				fillColor: {
					a: 150,
					r: 0,
					g: 150,
					b: 0
				},
				strokeColor: {
					a: 0,
					r: 0,
					g: 0,
					b: 0
				},
				infobox: "point",
				visible: true,
			});

			map.entities.push(polygon);
		}

		function addCircleEvent(e){
			if($("#interestPoint").hasClass('active')){
				var point = new Microsoft.Maps.Point(e.getX(), e.getY());
				var loc = map.tryPixelToLocation(point);
				addCircle(0.000001, loc);
			}
		}

		/*==========  Fonctions pour animer le drone  ==========*/

		var path = [
			new Microsoft.Maps.Location(42.8, 12.49),   //Italy
			new Microsoft.Maps.Location(51.5, 0),       //London
			new Microsoft.Maps.Location(40.8, -73.8),   //New York
			new Microsoft.Maps.Location(47.6, -122.3)   //Seattle
		];

		function ClearMap() {
			map.entities.clear();

			if (currentAnimation != null) {
				currentAnimation.stop();
				currentAnimation = null;
			}
		}

		function MovePinOnPath(isGeodesic) {
			ClearMap();

			var pin = new Microsoft.Maps.Pushpin(path[0]);
			map.entities.push(pin);

			currentAnimation = new Bing.Maps.Animations.PathAnimation(path, function (coord) {
				pin.setLocation(coord);
			}, isGeodesic, 1000);

			currentAnimation.play();
		}

		function DrawPath(isGeodesic) {
			ClearMap();

			var line;

			currentAnimation = new Bing.Maps.Animations.PathAnimation(path, function (coord, idx, frameIdx) {
				if (frameIdx == 1) {
					//Create the line the line after the first frame so that we have two points to work with.
					line = new Microsoft.Maps.Polyline([path[0], coord]);
					map.entities.push(line);
				}
				else if (frameIdx > 1) {
					var points = line.getLocations();
					points.push(coord);
					line.setLocations(points);
				}
			}, isGeodesic, 40000);

			currentAnimation.play();
		}

		// Move pushpin to new location
		// using a speed of 2000 milliseconds
		// or 2 seconds

		var pushpin = new Microsoft.Maps.Pushpin(path[0]);
		map.entities.push(pushpin);
		function movePushpin(){
			pushpin.moveLocation(
			    new Microsoft.Maps.Location(47, -87),
			    2000
			);
		}
	});
</script>
{% endblock %}
